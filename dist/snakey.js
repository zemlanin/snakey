// Generated by CoffeeScript 1.6.3
(function() {
  var A, B, DOWN, ESC, LEFT, R, RIGHT, UP, canvasStream, directionStream, displayStream, fieldStream, hideStream, initialSnake, keyboardStream, konami, lg, moveSnake, pauseStream, sadFace, showStream, snakeStream, statusStream, ticker, _ref,
    __slice = [].slice;

  _ref = [27, 38, 40, 37, 39, 65, 66, 82], ESC = _ref[0], UP = _ref[1], DOWN = _ref[2], LEFT = _ref[3], RIGHT = _ref[4], A = _ref[5], B = _ref[6], R = _ref[7];

  initialSnake = [[19, 10], [20, 10], [21, 10], [22, 10], [23, 10], [24, 10], [25, 10]];

  sadFace = [[18, 8], [21, 8], [17, 12], [18, 11], [19, 11], [20, 11], [21, 11], [22, 12]];

  lg = function(prefix) {
    if (prefix == null) {
      prefix = 'lg';
    }
    return console.log.bind(console, prefix);
  };

  konami = Rx.Observable.from([UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A]);

  keyboardStream = Rx.Observable.fromEvent(document.body, 'keyup');

  moveSnake = function(snake, direction) {
    var end, head, init, neckX, neckY, _i, _ref1;
    init = 2 <= snake.length ? __slice.call(snake, 0, _i = snake.length - 1) : (_i = 0, []), end = snake[_i++];
    _ref1 = init[0], neckX = _ref1[0], neckY = _ref1[1];
    head = (function() {
      switch (direction) {
        case UP:
          return [neckX, neckY - 1];
        case DOWN:
          return [neckX, neckY + 1];
        case LEFT:
          return [neckX - 1, neckY];
        case RIGHT:
          return [neckX + 1, neckY];
      }
    })();
    return [head].concat(__slice.call(init));
  };

  showStream = keyboardStream.pluck('keyCode').windowWithCount(10, 1).filter(function(keyCodes) {
    return keyCodes.sequenceEqual(konami);
  }).map(true);

  hideStream = keyboardStream.filter(function(_arg) {
    var keyCode;
    keyCode = _arg.keyCode;
    return keyCode === ESC;
  });

  showStream = keyboardStream.filter(function(_arg) {
    var keyCode;
    keyCode = _arg.keyCode;
    return keyCode === B;
  });

  showStream = showStream.map(function(v) {
    return Rx.Observable.of(v).concat(keyboardStream.filter(function(_arg) {
      var keyCode;
      keyCode = _arg.keyCode;
      return keyCode === R;
    })).takeUntil(hideStream);
  })["switch"]();

  canvasStream = showStream.take(1).doAction(function() {
    var canvas;
    canvas = document.createElement('canvas');
    canvas.width = 400;
    canvas.height = 200;
    return document.getElementById('wrapper').appendChild(canvas);
  }).map(function() {
    return document.querySelector('#wrapper canvas');
  }).share();

  displayStream = Rx.Observable.merge(showStream.map(true), hideStream.map(false)).distinctUntilChanged().combineLatest(canvasStream, _.identity);

  displayStream.subscribe(function(display) {
    document.querySelector('#wrapper img').hidden = display;
    return document.querySelector('#wrapper canvas').hidden = !display;
  });

  fieldStream = new Rx.Subject();

  fieldStream.combineLatest(canvasStream, function(field, canvas) {
    return {
      field: field,
      canvas: canvas
    };
  }).subscribe(function(_arg) {
    var canvas, ctx, field, x, y, _i, _len, _ref1, _results;
    field = _arg.field, canvas = _arg.canvas;
    ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height - 10);
    _results = [];
    for (_i = 0, _len = field.length; _i < _len; _i++) {
      _ref1 = field[_i], x = _ref1[0], y = _ref1[1];
      ctx.fillStyle = "#000000";
      _results.push(ctx.fillRect(10 * x, 10 * y, 10, 10));
    }
    return _results;
  });

  pauseStream = new Rx.Subject();

  ticker = showStream.select(function() {
    return Rx.Observable.just(-1).concat(Rx.Observable.interval(100)).map(function(index) {
      return index + 1;
    }).takeUntil(hideStream).takeUntil(pauseStream);
  })["switch"]();

  directionStream = keyboardStream.pluck('keyCode').filter(function(keyCode) {
    return keyCode === UP || keyCode === DOWN || keyCode === LEFT || keyCode === RIGHT;
  }).map(function(keyCode) {
    return {
      next: keyCode
    };
  }).merge(showStream.map({
    next: LEFT,
    reset: true
  })).scan(LEFT, function(prev, _arg) {
    var next, reset;
    next = _arg.next, reset = _arg.reset;
    switch (next) {
      case UP:
      case DOWN:
        if (prev === LEFT || prev === RIGHT) {
          return next;
        } else {
          return prev;
        }
        break;
      case LEFT:
      case RIGHT:
        if (reset || (prev === UP || prev === DOWN)) {
          return next;
        } else {
          return prev;
        }
    }
  });

  snakeStream = ticker.withLatestFrom(directionStream, function(index, direction) {
    return {
      index: index,
      direction: direction
    };
  }).scan(initialSnake, function(prevSnake, _arg) {
    var direction, index;
    index = _arg.index, direction = _arg.direction;
    if (index) {
      return moveSnake(prevSnake, direction);
    } else {
      return initialSnake;
    }
  }).map(function(snake) {
    var headX, headY, _ref1;
    _ref1 = snake[0], headX = _ref1[0], headY = _ref1[1];
    if ((0 <= headX && headX < 40) && (0 <= headY && headY < 19) && !_.findWhere(_.tail(snake), snake[0])) {
      return snake;
    } else {
      pauseStream.onNext(null);
      return sadFace;
    }
  });

  snakeStream.subscribe(fieldStream);

  statusStream = ticker.withLatestFrom(directionStream, function(index, direction) {
    return {
      index: index,
      direction: direction
    };
  }).map(function(_arg) {
    var direction, index;
    index = _arg.index, direction = _arg.direction;
    return "" + index + " / " + direction;
  }).combineLatest(canvasStream, function(status, canvas) {
    return {
      status: status,
      canvas: canvas
    };
  });

  statusStream.subscribe(function(_arg) {
    var canvas, ctx, status;
    status = _arg.status, canvas = _arg.canvas;
    ctx = canvas.getContext("2d");
    ctx.fillStyle = "#00A500";
    ctx.fillRect(0, canvas.height - 10, canvas.width, 10);
    ctx.fillStyle = "#FFFFFF";
    return ctx.fillText(status, 5, canvas.height - 1);
  });

}).call(this);
